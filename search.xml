<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计组笔记（不定期持续更新）</title>
      <link href="/2022/04/30/ji-zu-bi-ji-bu-ding-qi-chi-xu-geng-xin/"/>
      <url>/2022/04/30/ji-zu-bi-ji-bu-ding-qi-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<p>菜鸟一个，</p><p>请随意批评。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这只是笔者小羽在学习过程中的学习笔记，且不对计组进行深入探讨，内容偏概括，有些小羽认为自己比较熟知的或者只需了解知识点由关键词一笔带过。所以仅供参考。</p><p>（本篇将会持续更新~）</p><h2 id="第一章-对程序员来说-CPU-是什么"><a href="#第一章-对程序员来说-CPU-是什么" class="headerlink" title="第一章 对程序员来说 CPU 是什么"></a>第一章 对程序员来说 CPU 是什么</h2><h3 id="1-1-CPU的内部结构解析"><a href="#1-1-CPU的内部结构解析" class="headerlink" title="1.1 CPU的内部结构解析"></a>1.1 CPU的内部结构解析</h3><p>CPU 和 内存是由许多晶体管组成的电子部件，通常称为IC（Intergrated Circuit,集成电路）<br>从功能方面——CPU内部由寄存器、控制器、运算器、和时钟四个部分构成，各部分之间由电流信号相互连通</p><p>寄存器：用来暂存指令、数据等处理对象，可将其看作是内存的一种。根据种类不同，一个CPU内部会有 20~100 个寄存器<br>控制器：负责把内存上的指令、数据等读入寄存器，并根据指令的执行结果来控制整个计算机<br>运算器：负责运算从内存读入寄存器的数据<br>时钟：负责发出CPU开始计时的时钟信号。也有的计算机的时钟是位于CPU外部的</p><p>通常说的内存 指计算机的主存储器（main memory），简称主存<br>计算机关机-主存中存储的指令和数据会自动清除</p><h3 id="1-2-CPU是寄存器的集合体"><a href="#1-2-CPU是寄存器的集合体" class="headerlink" title="1.2 CPU是寄存器的集合体"></a>1.2 CPU是寄存器的集合体</h3><p>汇编语言采用助记符来编写程序<br>汇编——将汇编语言编写的程序转化为机器语言的过程<br>反汇编——反之</p><p>寄存器中存储的内容——指令和数据<br>数据分为——“用于运算的数值”和“表示内存地址的数值”<br>数据不同，存储其数值的寄存器也不同<br>CPU中每个寄存器的功能都是不同的——用于运算的数值放在累加寄存器中存储，表示内存地址的数值则放在基址寄存器和变址寄存器中存储</p><p>寄存器：（大致分为8类）<br>累加寄存器——存储执行运算的数据和运算后的数据<br>标志寄存器——存储运算处理后的CPU的状态<br>程序计数器——存储下一条指令所在内存的地址<br>基址寄存器——存储数据内存的起始地址<br>变址寄存器——存储基址寄存器的相对地址<br>通用寄存器——存储任意数据<br>指令寄存器——存储指令。CPU内部使用，程序员无法通过程序对该寄存器进行读写操作<br>栈寄存器——存储栈区域的起始地址</p><h3 id="1-3-决定程序流程的程序计数器"><a href="#1-3-决定程序流程的程序计数器" class="headerlink" title="1.3 决定程序流程的程序计数器"></a>1.3 决定程序流程的程序计数器</h3><p>程序计数器决定程序的流程</p><h3 id="1-4-条件分支和循环机制"><a href="#1-4-条件分支和循环机制" class="headerlink" title="1.4 条件分支和循环机制"></a>1.4 条件分支和循环机制</h3><p>程序的流程——顺序执行、条件分支和循环<br>条件分支和循环——跳转指令，结果值存在标志寄存器中<br>在跳转指令前会进行比较运算，就是在CPU内部做减法运算，看结果值决定是否跳转</p><h3 id="1-5-函数的调用机制"><a href="#1-5-函数的调用机制" class="headerlink" title="1.5 函数的调用机制"></a>1.5 函数的调用机制</h3><p>函数调用处理——通过程序计数器的值设定成函数的存储地址来实现<br>单纯的跳转指令无法实现函数的调用，<br>使用机器语言的 call指令 和 return指令 解决<br>call指令——把调用函数后要执行的指令地址存储在名为栈的主存内<br>return指令——把保存在栈中的地址设定到程序计数器中</p><h3 id="1-6-通过地址和索引实现数组"><a href="#1-6-通过地址和索引实现数组" class="headerlink" title="1.6 通过地址和索引实现数组"></a>1.6 通过地址和索引实现数组</h3><p>通过基址和变址寄存器，就可对主内存上特定的内存区域进行划分，从而实现类似于数组的操作<br>实际内存地址 = 基址 + 变址寄存器<br>变指寄存器的值 = 高级编程语言程序中数组的索引功能</p><h3 id="1-7-CPU的处理其实很简单"><a href="#1-7-CPU的处理其实很简单" class="headerlink" title="1.7 CPU的处理其实很简单"></a>1.7 CPU的处理其实很简单</h3><p>机器语言指令的只要类型<br>数据传送指令——寄存器和内存、内存和内存、寄存器和外围设备之间的数据读写操作<br>运算指令——用累加寄存器执行算数运算、逻辑运算、比较运算和移位运算<br>跳转指令——实现条件分支、循环、强制跳转等<br>call/return 指令——函数的调用/返回调用前的地址</p><h2 id="第二章-数据是用二进制数表示的"><a href="#第二章-数据是用二进制数表示的" class="headerlink" title="第二章 数据是用二进制数表示的"></a>第二章 数据是用二进制数表示的</h2><h3 id="2-1-用二进制数表示计算机信息的原因"><a href="#2-1-用二进制数表示计算机信息的原因" class="headerlink" title="2.1 用二进制数表示计算机信息的原因"></a>2.1 用二进制数表示计算机信息的原因</h3><p>IC 分为：模拟IC 和 数字IC（*）<br>cpu和内存是IC的一种<br><strong>IC的一个引脚，只能表示两个状态，IC的这个特性决定计算机的信息数据只能用二进制数来处理</strong></p><p>所以二进制的进制方式就变成了逢二进一：<br>1，10，11，100……</p><p>二进制数不是专门为IC所设计的，但和IC的特性非常吻合</p><p>位：计算机处理信息的最小单位 = 二进制中的一位 = 1bit<br>bit 是二进制数位（binary digit）缩写<br>IC的一个引脚表示二进制数的一位</p><p>字节：基本单位<br>8 bit = 1 bite（“咬下的一口”）读音相似，因此bite被视为信息的基本单位</p><p>计算机内部所有信息都用二进制数处理，具体进行何种处理，取决于程序的编写方式</p><h3 id="2-2-什么是二进制数"><a href="#2-2-什么是二进制数" class="headerlink" title="2.2 什么是二进制数"></a>2.2 什么是二进制数</h3><p>**的##次幂 = 位权<br>** = 基数（数值的表示方法进位计数知道中各位数上可能有的数值的个数）</p><h3 id="2-3-移位运算和乘除运算的关系"><a href="#2-3-移位运算和乘除运算的关系" class="headerlink" title="2.3 移位运算和乘除运算的关系"></a>2.3 移位运算和乘除运算的关系</h3><p>移位运算：将二进制数值的各数位进行左右移动的运算</p><p>和十进制数一样，四则运算也可以使用在二进制数中，只要注意逢二进位即可</p><p>移位运算 可代替乘除法运算</p><h3 id="2-4-便于计算机处理的”补数“"><a href="#2-4-便于计算机处理的”补数“" class="headerlink" title="2.4 便于计算机处理的”补数“"></a>2.4 便于计算机处理的”补数“</h3><p>符号位；</p><p>求一个负数的正数表示方法，即求相应正数的补数，用补数来代表负数进行存储和运算</p><p>补数求解的变换方法：全部取反 +1</p><p>人为规定的编程语言中，eg整数数据类型，有的可以处理负数，有的则不能，即最高位为一的二进制数据中，不一定表示负数，要看认为规定的这个数是否可以处理负数，若不可以处理负数，则最高位不表示符号位，就看做数值位，若可以处理负数，则相反。</p><p>根据人为规定的是否可以处理负数，其能表示的值的范围也不同，即使两个数据类型能表示的值的数量相同（划分多少的字节给你存这个类型的变量，这个类型的变量总共能存多少个<strong>值</strong>。） </p><p>能处理负数的数据类型的值的取值范围中，其表示的负数比正数多一 eg： -32768~32767</p><p>2个字节 16位二进制数，共能表示65536种值，若数据类型能够处理负数，则正数与负数一半一半是32768，最高位为符号位，不表示数值，则正数能表示的最大数值是：2^0+2^1+……+2^14=323767,最小值是0，负数能表示的最大值为-1，最小值为-323768</p><h3 id="2-5-逻辑右移和算数右移的区别"><a href="#2-5-逻辑右移和算数右移的区别" class="headerlink" title="2.5 逻辑右移和算数右移的区别"></a>2.5 逻辑右移和算数右移的区别</h3><p>移位有两种<br>左移都补0<br>右移分情况</p><p>逻辑右移：在最高位补0（霓虹灯向右滚动），溢出低位舍弃（<strong>图形模式</strong>）<br>算数右移：在带符号的数值进行运算中，移位后要在最高位填充移位前符号位的值（0或1）</p><p>右移2位，变为原数的1/4倍<br>左    2                             4</p><p>符号扩充：在保持值不变的前提下将其转换为16位和32位的二进制数；</p><p>不管是正数还是补数表示的负数，都只需用符号位的值（0或1）填充高位即可。</p><h3 id="2-6-掌握逻辑运算的窍门"><a href="#2-6-掌握逻辑运算的窍门" class="headerlink" title="2.6 掌握逻辑运算的窍门"></a>2.6 掌握逻辑运算的窍门</h3><p>在运算中，与逻辑相对的术语是算数</p><p>算术：二进制表示的信息作为四则运算的数值来处理<br>逻辑：像图形模式那样，将数值处理为单纯的0和1的罗列</p><p>计算机能处理的运算，大体分为两类，<br>1）算术运算：之加减乘除四则运算<br>2）逻辑运算:只对二进制<strong>各数字位</strong>的0 和1 <strong>分别进行处理</strong>的运算，有<br>逻辑非—NOT运算<br>逻辑与—AND<br>逻辑或—OR<br>逻辑异或—XOR</p><h2 id="第三章-计算机进行小数运算时出错的原因"><a href="#第三章-计算机进行小数运算时出错的原因" class="headerlink" title="第三章 计算机进行小数运算时出错的原因"></a>第三章 计算机进行小数运算时出错的原因</h2><p>热身回答</p><p>将小数分为符号、尾数、基数、指数4部分进行表现的形式称为浮点数（浮点数形式）</p><p>通过把0作为数值范围的中间值，从而在不使用符号位的情况下来表示负数的方法称为EXCESS系统表现</p><h3 id="3-1-将0-1累加100次也得不到1"><a href="#3-1-将0-1累加100次也得不到1" class="headerlink" title="3.1 将0.1累加100次也得不到1"></a>3.1 将0.1累加100次也得不到1</h3><p>计算机在运算时为什么会出错，如何避免出错</p><h3 id="3-2-用二进制数表示小数"><a href="#3-2-用二进制数表示小数" class="headerlink" title="3.2  用二进制数表示小数"></a>3.2  用二进制数表示小数</h3><p>进制之间的转换</p><h3 id="3-3-计算机运算出错的原因"><a href="#3-3-计算机运算出错的原因" class="headerlink" title="3.3 计算机运算出错的原因"></a>3.3 计算机运算出错的原因</h3><p>有一些十进制数的小数无法转换成二进制数，eg 十进制数 0.1 无法用二进制数正确表示,计算机这个功能有限的机器设备，是无法处理无限循环小数的。在遇到循环小数时，计算机就会根据变量数据类型所对应的长度将数值从中间截断或者四舍五入，所以 计算机计算3*（1/3）时会得到 0.999999（假如在0.333333时截断）.所以计算机运算会出错。</p><h3 id="3-4-什么是浮点数"><a href="#3-4-什么是浮点数" class="headerlink" title="3.4 什么是浮点数"></a>3.4 什么是浮点数</h3><p>双精度浮点数：用64位来表示全体小数（在c语言中 ；double）<br>单精度浮点数：    32                                （float）<br>浮点数与定点数相对（<strong>小数点的实际位置固定不变</strong>）</p><p>浮点数 = 符号 +尾数 +基数 + 指数 （基数为二，默认）</p><p>数据正负；符号部分：指使用一个数据位来表示数值的符号<br>数据大小；尾数+指数</p><p>为了方便计算机处理，需要制定一个统一的规则——<strong>正则表达式</strong>，可以将表现形式多样的浮点数统一为一种表现形式（浮点数可以用多种不同的形式来表示同一值。）</p><p>尾数部分 使用的是——<strong>将小数点前面的值固定为1的正则表达式</strong>（按照特定的规则来表示数据的形式。出小数点外，字符串以及数据库等，都有各自的正则表达式）</p><p>指数部分 使用的是——<strong>EXCESS 系统表现</strong>(为了表示负数时不使用符号位)，通过将指数部分表示范围的中间值设为0，使得负数不需要用符号来表示</p><h3 id="3-7-如何避免计算机计算出错"><a href="#3-7-如何避免计算机计算出错" class="headerlink" title="3.7 如何避免计算机计算出错"></a>3.7 如何避免计算机计算出错</h3><p>1）无视（不影响程序）</p><p>2）把小数转换成整数进行计算</p><p>3）BCD也是一种使用二进制表示十进制的方法</p><h3 id="3-8-二进制数与十六进制数"><a href="#3-8-二进制数与十六进制数" class="headerlink" title="3.8 二进制数与十六进制数"></a>3.8 二进制数与十六进制数</h3><p>在C语言中，在数值的开头加上 ‘ 0x ’ 就可以表示十六进制数；</p><p>实际程序中，二进制位数过多，看起来不方便，因此经常会用十六进制数来代替二进制数</p><h2 id="第四章-熟练使用有棱有角的内存"><a href="#第四章-熟练使用有棱有角的内存" class="headerlink" title="第四章 熟练使用有棱有角的内存"></a>第四章 熟练使用有棱有角的内存</h2><p>热身回答<br>高级编程语言中的数据类型表示的是什么<br>占据内存区域的大小和存储在该内存区域的数据类型<br>eg c语言数据类型中的short类型。表示的是占据2字节的内存区域，并且存储整数</p><p>32位内存地址的环境中，指针变量的长度是32位<br>指针——用于存储内存地址的变量<br>用LIFO 方式进行数据读写的数据结构称为栈<br>栈，是一种后入先出（LIFO  = Last in First out）式的数据结构</p><p>根据数据的大小链表分叉成两个方向的数据结构称为 二叉查找树<br>二叉查找树 ，从节点分成两个叉的树状数据结构</p><h3 id="4-1-内存的物理机制很简单"><a href="#4-1-内存的物理机制很简单" class="headerlink" title="4.1 内存的物理机制很简单"></a>4.1 内存的物理机制很简单</h3><p>内存IC 中有电源、地址信号、数据信号、控制信号等用于输入输出的大量引脚，通过为其指定地址，来进行数据的读写。     内存IC内部有大量可以存储8位数据的地方，通过地址指定这些场所，之后即可进行数据的读写</p><h3 id="4-2-内存的逻辑模型是楼房"><a href="#4-2-内存的逻辑模型是楼房" class="headerlink" title="4.2 内存的逻辑模型是楼房"></a>4.2 内存的逻辑模型是楼房</h3><p>每层都存储数据——数据引脚的多少决定了计算机一次能够处理的数据的长度，即每层楼房可以存储的数据的位数，以此为单位来对数据进行处理</p><p>编程语言中的数据类型表示存储的是何种类型的数据。<br>在内存中——占用内存大小（楼层数）</p><p>即使是物理上以1个字节为单位来逐一读写数据的内存，在程序中，通过指定其类型（变量的数据类型等），也能实现以特定字节数位单位来进行读写</p><p>通过使用变量，即便不指定物理地址，也可以在程序中对内存进行读写，这是因为在程序运行时，Windows等操作系统会自动决定变量的物理地址</p><p>数据在内存中存储有两种方式<br>低字节序，将多字节数据的低位字节存储在内存低位地址的方式<br>高字节序，                         高          </p><h3 id="4-3简单的指针"><a href="#4-3简单的指针" class="headerlink" title="4.3简单的指针"></a>4.3简单的指针</h3><p>指针也是一种变量，它所表示的不是数据的值，而是存储着数据的内存地址，<br>指针变量的长度即内存地址的位数<br>通过使用指针，就可以对任意指定地址的数据进行读写</p><p>指针的数据类型表示一次可以读写的长度</p><h3 id="4-4数组是高效使用内存的基础"><a href="#4-4数组是高效使用内存的基础" class="headerlink" title="4.4数组是高效使用内存的基础"></a>4.4数组是高效使用内存的基础</h3><p>数组：多个同样数据类型的数据在内存中连续排列的形式<br>索引，区分数组元素的各个数据<br>指定索引，即可对该索引所对应地址的内存进行读写操作（编译器完成索引和内存的变换工作）<br>数组的定义中所指定的数据类型，也表示一次能够读写的内存大小，这样就可以多个字节来进行读写，简化程序所以可以指定任意数据类型来定义数组</p><p>数组和内存的物理构造是一样的——数组是内存的使用方法的基础</p><h3 id="4-5栈、队列以及环形缓冲区"><a href="#4-5栈、队列以及环形缓冲区" class="headerlink" title="4.5栈、队列以及环形缓冲区"></a>4.5栈、队列以及环形缓冲区</h3><p>内存的使用，数组的变形方法<br>每次保存临时数据需要指定地址和索引，程序麻烦——改进——栈和队列——都可以不通过指定地址和索引对数组的元素进行读写<br>区别，数据出入顺序不同</p><p>对内存数据进行读写时——<br>栈，LIFO（Last input first out ）(干草堆，堆在最上面的最先拿走——通过Push Pop 函数实现写入和读出数据)<br>队列，FIFO （First input first out）（排队买票，排在最前面的最先拿票，最先走出队列——通过Enqueue DeQueue 函数实现写入和读出数据）——能够协调好数据输入和处理时间的关系——一般以环状缓冲区的方式来实现——连接数组的开头和结尾——数据写入和读出实现循环</p><h3 id="4-6-链表使元素的追加和删除更加容易"><a href="#4-6-链表使元素的追加和删除更加容易" class="headerlink" title="4.6 链表使元素的追加和删除更加容易"></a>4.6 链表使元素的追加和删除更加容易</h3><p>否则删除或者添加一个数据，底下其余 所有的数据地址都要改变，使计算机速度变慢</p><h3 id="4-7-二叉查找树使数据搜索更有效"><a href="#4-7-二叉查找树使数据搜索更有效" class="headerlink" title="4.7 二叉查找树使数据搜索更有效"></a>4.7 二叉查找树使数据搜索更有效</h3><p>二叉查找数是指在链表的基础上往数组中追加元素时，考虑到数据的大小关系，将其分成左右两个方向的表现形式</p><h2 id="第五章-内存和磁盘的亲密关系"><a href="#第五章-内存和磁盘的亲密关系" class="headerlink" title="第五章 内存和磁盘的亲密关系"></a>第五章 内存和磁盘的亲密关系</h2><p>存储程序方式（程序内置方式）指的是什么<br>在存储装置中保存程序，通过有序地被读出来并逐一执行的方式</p><p>通过使用内存来提高磁盘访问速度的机制称为——Disk Cache（磁盘缓存），磁盘缓存是指，把磁盘中读出的数据存储在内存中，当该数据再次被读取时，不是从磁盘而是直接从内存中高速读出</p><p>把磁盘的一部分作为假象内存来使用的机制称为——虚拟内存（virtual memory），借助虚拟内存，哪怕是内存容量不足的计算机，也可以运行很大的程序</p><p>Windows中，在程序运行时，存储着可以动态加载调用的函数和数据的文件称为——DLL（Dynamic Link Library）</p><p>在EXE程序文件中，静态加载函数的方式称为——静态链接，函数的加载方式有静态链接和动态链接两种</p><p>在Windows计算机中，一般磁盘的1个扇区时 512 个字节，扇区是磁盘保存数据的物理单位</p><p>从存储容量上看，内存高速低价 ，磁盘低速廉价</p><h3 id="5-1-不读入内存就无法运行"><a href="#5-1-不读入内存就无法运行" class="headerlink" title="5.1 不读入内存就无法运行"></a>5.1 不读入内存就无法运行</h3><p>程序要从磁盘加载到内存后才开始运行</p><h3 id="5-2-磁盘缓存加快了磁盘访问速度"><a href="#5-2-磁盘缓存加快了磁盘访问速度" class="headerlink" title="5.2 磁盘缓存加快了磁盘访问速度"></a>5.2 磁盘缓存加快了磁盘访问速度</h3><p>缓存（ cache）高速缓存、仓库<br>磁盘缓存——把从磁盘中读出的数据存储到内存空间中的方式，<br>当需要读取同一数据时，就不用通过实际的磁盘，而是从磁盘缓存中把内容读出<br>可大  大改善磁盘数据的访问数据</p><p>但随着硬盘访问速度的大幅改善，磁盘缓存的效果没有之前那么明显了</p><h3 id="5-3-虚拟内存把磁盘作为部分内存来使用"><a href="#5-3-虚拟内存把磁盘作为部分内存来使用" class="headerlink" title="5.3 虚拟内存把磁盘作为部分内存来使用"></a>5.3 虚拟内存把磁盘作为部分内存来使用</h3><p>虚拟内存 ——把磁盘的一部分作为假象的内存来使用<br>虚拟内存的方法有，分页式和分段式两种，</p><p>Windows采用的是分页式，在不考虑程序构造的情况下，把运行的程序按照一定大小的页进行分割，并以页为单位在内存和磁盘间进行置换，Windows计算机页的大小是4KB ，磁盘内容读出到内存——Page In  ；内存内容写入磁盘——Page Out ，<br>虚拟内存用的文件——page file ，文件大小就是虚拟内存的大小<br>在Windows的控制面板中，可查看或变更当前虚拟内存的设定</p><p>分段式虚拟内存，把要运行的程序分割成以处理集合及数据集合等为单位的段落，然后再以分割后的段落为单位在内存和磁盘之间进行数据置换</p><h3 id="5-4节约内存的编程方法"><a href="#5-4节约内存的编程方法" class="headerlink" title="5.4节约内存的编程方法"></a>5.4节约内存的编程方法</h3><p>图形用户界面——GUI<br>Windows前身 MS-DOS 操作系统——CLI（命令行界面）</p><p>Page In 和Page Out 往往伴随低速的磁盘访问，所以虚拟内存无法彻底解决内存不足的问题<br>两种方法，增加内存容量和把要运行的应用文件变小<br>两个把应用文件变小的编程方法<br>（1）通过DLL文件实现函数共有<br>DLL（Dynamic Link Library ）文件，在程序运行时可以动态加载Library（函数和数据集合）的文件，多个应用可以共有同一个DLL文件，达到节约内存的效果，而原本的静态链接则会导致内存的利用效率下降，进行动态链接则可以节省内存<br>（2）通过调用_stdcall来减小程序文件的大小<br>_stdcall ——standard call（标准调用），Windows提供的DLL文件内的函数，基本上都是_stdcall 调用方式。主要是为了节约内存。</p><p>C语言中，在调用函数后，需要进行栈清理处理指令，（把不需要的数据和传递函数的参数时使用的内存上的栈区域中清理出去）<br>C语言通过栈来传递函数的参数，32位的CPU中，一次push指令可以存储4个字节的数据</p><p>CPU会提前准备好栈机制，往栈中存储数据的汇编语言指令是 Push；从栈中取出数据的汇编语言指令是pop  。栈一般是用来实现函数调用机制的。如果想任意利用栈，程序员就需要自己用程序来实现所需要的栈机制。<br>CPU中，栈中堆积的最高的数据地址是保存在esp（esp是Pentium系列CPU的栈指针名）中，</p><p>C语言中，函数的返回值，是通过寄存器而非栈来返回的</p><h3 id="5-5-磁盘的物理结构"><a href="#5-5-磁盘的物理结构" class="headerlink" title="5.5 磁盘的物理结构"></a>5.5 磁盘的物理结构</h3><p>磁盘的物理结构是指 磁盘存储数据的形式<br>磁盘是通过把其物理表面划分成多个空间来使用的。<br>划分的方式为<br>扇区方式 ——磁盘划分为固定长度的空间<br>可变长方式 两种——磁盘划分为可变的空间</p><p>扇区是对磁盘进行物理读写的最小单位，<br>Windows中，一般1个扇区 = 512字节<br>但在逻辑方面（软件方面）对磁盘进行读写的单位是扇区整数倍簇，根据磁盘容量不同，一簇可以是多个扇区。磁盘容量越大，簇的容量就越大，但在软盘中，1簇 = 512字节 = 1扇区，此时簇和扇区的大小是相等的</p><p>不管是硬盘还是软盘，不同的文件是不能存储在同一个簇中的——所以无论多小的文件，都会占用1簇的空间，所以，所有的文件都会占用1簇的整数倍的磁盘空间。</p><p>（注：本篇笔记是根据《程序是怎样跑起来的》一书进行的章节规划，想细致深入了解的小伙伴就去看看这本书吧~）</p>]]></content>
      
      
      <categories>
          
          <category> 计组知识点笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组笔记 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(ubuntu) 转 windows 的心酸史</title>
      <link href="/2022/04/02/ubuntu-zhuan-window-de-xin-suan-shi/"/>
      <url>/2022/04/02/ubuntu-zhuan-window-de-xin-suan-shi/</url>
      
        <content type="html"><![CDATA[<p>菜鸟一个，</p><p>请随意批评。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前笔者小羽不知道脑瓜子哪门抽的筋，竟突然想把电脑改成Linux系统的，当时小羽那是说干就干，一顿操作之后，电脑成功变为了Linux系统。</p><p>但后来用着用着还是有许多不方便的地方，特别是对于小羽这种Linux初学者而言，说实话不太友好，还有就是平常要用到windows系统的地方也挺多，用Linux系统很多地方其实也挺不方便的（比如Ubuntu的QQ界面…也太简陋了）；</p><p>当时能够肆无忌惮，毫无顾虑地改电脑系统，是因为小羽还有一台小PC，是一个平板电脑二合一的，说它小，当然是因为它的硬盘容量实在是太小了，没过多久就满了…</p><p>所以综合考虑，小羽还是准备把大电脑改为Windows的操作系统。</p><p>下面介绍两种小羽试过的方法：</p><h2 id="1-法一用UltralSO软碟通制作启动盘-不建议"><a href="#1-法一用UltralSO软碟通制作启动盘-不建议" class="headerlink" title="1.法一用UltralSO软碟通制作启动盘(不建议)"></a>1.法一用UltralSO软碟通制作启动盘(不建议)</h2><p><img src="https://s1.328888.xyz/2022/04/03/LdZK4.png" alt="LdZK4.png"></p><p>：（这里贴的图里面小羽没有选择文件，所以显示空白）</p><h3 id="1-1步骤"><a href="#1-1步骤" class="headerlink" title="1.1步骤"></a>1.1步骤</h3><p>1）依次文件打开ios镜像，</p><p>2）点击工具栏 ‘启动’ ，</p><p>3）点击写入硬盘镜像，</p><p>4）映像文件就是你的windows  ios镜像文件地址，</p><p>5）其他的不需改变，</p><p>以上皆为常规步骤；</p><h3 id="1-2-tip1—便捷启动"><a href="#1-2-tip1—便捷启动" class="headerlink" title="1.2   tip1—便捷启动"></a>1.2   tip1—便捷启动</h3><p>不要直接 写入！</p><p>点击<strong>便捷启动</strong>，</p><p>点击<strong>写入新的驱动器引导扇区</strong>，</p><p>点击<strong>syslinux</strong>，</p><p>之后显示成功后再点击写入，</p><p>这里其实无须格式化，因为写入前必定格式化你的U盘。</p><p>（小羽查看的资料有的说在制作windows镜像时要点击syslinux，有的并没有；sysLinux是一个功能强大的引导加载程序，是用来简化首次安装linux的时间，</p><p>当初小羽制作ubuntu启动盘时就要syslinux一下，但是这里制作windows启动盘，小羽也试了syslinux一下，并没有出现什么问题，但最后安装时因为一些原因失败了，这个下面再说，所以不能保证一定成功，有风险)</p><p>制作完启动盘之后就是安装了，这个详细过程参考链接：<a href="https://blog.csdn.net/lpwmm/article/details/88927543?utm_source=app&amp;app_version=5.3.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen">链接</a></p><h3 id="1-3-tip2—可能遇到的问题"><a href="#1-3-tip2—可能遇到的问题" class="headerlink" title="1.3   tip2—可能遇到的问题"></a>1.3   tip2—可能遇到的问题</h3><h4 id="1-3-1-Windows-无法打开所需文件-D-Sources-install-wim"><a href="#1-3-1-Windows-无法打开所需文件-D-Sources-install-wim" class="headerlink" title="1.3.1. Windows 无法打开所需文件 D:\Sources\install.wim"></a>1.3.1. Windows 无法打开所需文件 D:\Sources\install.wim</h4><p><img src="https://s1.328888.xyz/2022/04/03/LdFyQ.jpg" alt="LdFyQ.jpg"></p><p>当时看到这个的时候小羽高兴死了，心想只要等待它安装就好了，</p><p>哪知给我出了这样一个问题：</p><p><img src="https://s1.328888.xyz/2022/04/03/LdVd3.jpg" alt="LdVd3.jpg"></p><p>百度搜索，原来是ISO镜像文件中的 install.wim文件大小超过4G, 导致烧盘软件烧盘时无法复制进启动盘，具体看链接：<a href="https://blog.csdn.net/H_CrazyPan/article/details/117790700">https://blog.csdn.net/H_CrazyPan/article/details/117790700</a></p><p>终于解决了这个问题之后，再次安装，哪知道系统提示此电脑不支持win11系统 ！</p><p>wtfa ？</p><p>当初小羽这台电脑没转Ubuntu之前，可是支持win11的…</p><p>心酸……</p><p>所以友友们以防万一还是下载win10 的ios镜像吧！</p><h4 id="1-3-2-unknow-引导扇区不支持NTFS文件系统"><a href="#1-3-2-unknow-引导扇区不支持NTFS文件系统" class="headerlink" title="1.3.2  unknow 引导扇区不支持NTFS文件系统"></a>1.3.2  unknow 引导扇区不支持NTFS文件系统</h4><p>当小羽重新制作win10 的启动盘时，却显示<strong>unknow 引导扇区不支持NTFS文件系统</strong></p><p>这里直接给出解决的链接：<a href="https://yebd1h.smartapps.cn/pages/blog/index?blogId=117201809&amp;oauthType=search&amp;_swebfr=1&amp;hostname=bdlite">https://yebd1h.smartapps.cn/pages/blog/index?blogId=117201809&amp;oauthType=search&amp;_swebfr=1&amp;hostname=bdlite</a></p><p>这个链接里的方法小羽也没试过，感兴趣的友友可以试试，</p><p>因为小羽想要找到一种一劳永逸，不用担心中间出问题的好方法——法二。</p><h2 id="2-法二使用微软官方工具下载安装windows系统-强烈推荐"><a href="#2-法二使用微软官方工具下载安装windows系统-强烈推荐" class="headerlink" title="2.法二使用微软官方工具下载安装windows系统(强烈推荐)"></a>2.法二使用微软官方工具下载安装windows系统(强烈推荐)</h2><h3 id="2-1-这里改进一下网上一些博主的做法"><a href="#2-1-这里改进一下网上一些博主的做法" class="headerlink" title="2.1 这里改进一下网上一些博主的做法"></a>2.1 这里改进一下网上一些博主的做法</h3><p>用国内浏览器打开官网是不会直接出现  选择版本直接下载的</p><p>这需要 Google 浏览器</p><p><img src="https://s1.328888.xyz/2022/04/03/LdN6M.jpg" alt="LdN6M.jpg"></p><p>一般的国内浏览器打开是这样的：</p><p>只会显示立即下载工具</p><p><img src="https://s1.328888.xyz/2022/04/03/LdMY2.png" alt="LdMY2.png"></p><p>这时候网上一些博主就出了让国内的浏览器显示出 “选择版本” 直接下载的教程……</p><p>其实大可不必，</p><p>咱们国内的浏览器是 “立即下载工具” ，那就按照这个一步一步来就好了</p><p>最后一样可以达到目的，而且是一步到位</p><p>再也不用去用ultralso或者等等其他的软件去制作启动盘了。</p><h3 id="2-2-开始，点击立即下载工具并打开"><a href="#2-2-开始，点击立即下载工具并打开" class="headerlink" title="2.2  开始，点击立即下载工具并打开"></a>2.2  开始，点击立即下载工具并打开</h3><p><img src="https://s1.328888.xyz/2022/04/03/LdxyC.png" alt="LdxyC.png"></p><p>点击接受</p><h3 id="2-3-执行操作"><a href="#2-3-执行操作" class="headerlink" title="2.3 执行操作"></a>2.3 执行操作</h3><p><img src="https://s1.328888.xyz/2022/04/03/LlePt.png" alt="LlePt.png"></p><p>点击为另一台电脑创建安装介质</p><h3 id="2-4-选择语言、体系结构和版本"><a href="#2-4-选择语言、体系结构和版本" class="headerlink" title="2.4 选择语言、体系结构和版本"></a>2.4 选择语言、体系结构和版本</h3><p><img src="https://s1.328888.xyz/2022/04/03/LlUK1.png" alt="LlUK1.png"></p><p>点击下一步</p><h3 id="2-5-tip1—没有出现选择要使用介质的页面问题"><a href="#2-5-tip1—没有出现选择要使用介质的页面问题" class="headerlink" title="2.5 tip1—没有出现选择要使用介质的页面问题"></a>2.5 tip1—没有出现选择要使用介质的页面问题</h3><p>注意点来了，这时小羽点击下一步后，并没有出现网上所说的选择要使用的介质 的页面</p><p><img src="https://s1.328888.xyz/2022/04/03/LlJXP.png" alt="LlJXP.png"></p><p>反而出现了提示：C盘上需要8GB 的可用磁盘空间，</p><p>开头前言小羽也讲过，小PC的磁盘都已经满了，</p><p>所以这时只需清理一下磁盘空间即可</p><p><img src="https://s1.328888.xyz/2022/04/03/Llyhe.png" alt="Llyhe.png"></p><p>接下来就是按照步骤来就好了，</p><p>直到出现提示 U盘已准备就绪</p><p>到此启动盘就制作好了</p><p>一步到位，就是有些慢，</p><p>这是小羽网络的问题，</p><p><img src="https://s1.328888.xyz/2022/04/03/LlLpm.png" alt="LlLpm.png"></p><h3 id="2-6-tip2—win10安装中间流程的增加（因为网上的教程有年纪了）"><a href="#2-6-tip2—win10安装中间流程的增加（因为网上的教程有年纪了）" class="headerlink" title="2.6 tip2—win10安装中间流程的增加（因为网上的教程有年纪了）"></a>2.6 tip2—win10安装中间流程的增加（因为网上的教程有年纪了）</h3><p>网上对于接下来U盘插入电脑安装的操作非常多，这里小羽就不多赘述了，</p><p>上面小羽也已经给过推荐链接，这里再贴一下：<a href="https://blog.csdn.net/lpwmm/article/details/88927543?utm_source=app&amp;app_version=5.3.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen">链接</a></p><p>需要注意的是，网上的教程大都比较老，与我们安装win10的界面操作可能有些不同，不过也是大同小异，一步一步按照提示来做就可以了</p><h3 id="2-7-tip3—磁盘分区问题"><a href="#2-7-tip3—磁盘分区问题" class="headerlink" title="2.7 tip3—磁盘分区问题"></a>2.7 tip3—磁盘分区问题</h3><p>安装过程中值得注意的是关于磁盘分区的问题</p><p>一定要将windows安装在主分区</p><p>如果你跟小羽一样没有主分区，那就删除所有的分区</p><p>重新分区，再格式化（鼠标是随意停留的）</p><p><img src="https://s1.328888.xyz/2022/04/03/Llhh0.jpg" alt="Llhh0.jpg"></p><p><img src="https://s1.328888.xyz/2022/04/03/LlDfW.jpg" alt="LlDfW.jpg"></p><p>![LlDfW.jpg](<a href="https://s1.328888.xyz/2022/04/03/LlDfW.jpg">https://s1.328888.xyz/2022/04/03/LlDfW.jpg</a></p><p><img src="https://s1.328888.xyz/2022/04/03/LlHMF.jpg" alt="LlHMF.jpg"></p><h3 id="2-8-成功转换"><a href="#2-8-成功转换" class="headerlink" title="2.8 成功转换"></a>2.8 成功转换</h3><p>安装过程中等待一会儿，</p><p>最后成功转换为windows系统，</p><p><img src="https://s1.328888.xyz/2022/04/03/LllFk.jpg" alt="LllFk.jpg"></p><h2 id="收工！"><a href="#收工！" class="headerlink" title="收工！"></a>收工！</h2>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强烈安利的博客搭建教程!hexo</title>
      <link href="/2022/03/26/qiang-lie-an-li-de-bo-ke-da-jian-jiao-cheng-hexo/"/>
      <url>/2022/03/26/qiang-lie-an-li-de-bo-ke-da-jian-jiao-cheng-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="强烈安利的博客搭建教程"><a href="#强烈安利的博客搭建教程" class="headerlink" title="强烈安利的博客搭建教程"></a>强烈安利的博客搭建教程</h1><p>菜鸟一个，</p><p>请随意批评。</p><h2 id="1-叙述"><a href="#1-叙述" class="headerlink" title="1.叙述"></a>1.叙述</h2><p>​        在这里向大家推荐一位博主写的利用hexo框架+部署到github的博客搭建教程。</p><p><strong>链接</strong>:[<a href="https://reclusew.github.io/2021/08/12/blog-setup/#toc-heading-20">2021年最全搭建+美化+使用博客教程 | Recluse (reclusew.github.io)</a>](<a href="https://reclusew.github.io/2021/08/12/blog-setup/#toc-heading-20">2021年最全搭建+美化+使用博客教程 | Recluse (reclusew.github.io)</a>)</p><p>​        最后的效果，大家可以参考本人按照教程搭建的网站：<a href="https://meimiss.github.io/">https://meimiss.github.io</a></p><p>​        亲测理解好懂，一些问题和细节写的很到位，对小白友好，从搭建博客，到美化，再到写博客一条龙服务全搞定！本人认为这应该是目前全网最全的保姆级教程了（虽然网上有很多小白教程，但一些问题和细节解释的不清楚，导致小白无法看懂和理解；还有就是hexo不同版本之间相差很大，<strong>请根据你的hexo版本进行与之相符合配置!</strong> ）</p><h2 id="2-TIPS"><a href="#2-TIPS" class="headerlink" title="2.TIPS"></a>2.TIPS</h2><ol><li><p>这里我使用的是博主推荐的GitHub上大佬主题的最新稳定版：hexo-theme-metery</p><p>具体详细信息看<strong>链接</strong>：<a href="https://reclusew.github.io/2021/08/12/blog-setup/#toc-heading-20">https://reclusew.github.io/2021/08/12/blog-setup/#toc-heading-20</a> （修改主题的内容，生成个性化的主题等操作尽在其中）</p></li><li><p>有些同学可能GitHub上不去，很慢；这里推荐一个本人使用的<strong>FastGithub</strong>加速器，windows系统是最容易操作的，下载并打开压缩包之后，只要双击运行 FastGithub.UI.exe.config 即可。</p><p><img src="https://s1.328888.xyz/2022/04/02/L8PmP.png" alt="L8PmP.png"></p><p>其他系统的安装我目前还没有接触。</p><p>有需要的同学可点击<strong>链接</strong>：<a href="https://github.com/dotnetcore/FastGithub">https://github.com/dotnetcore/FastGithub</a></p></li></ol><h2 id="暂时就写这么多啦。"><a href="#暂时就写这么多啦。" class="headerlink" title="暂时就写这么多啦。"></a>暂时就写这么多啦。</h2><p>希望我们可以一起进步！</p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> typora </tag>
            
            <tag> FastGithub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/25/hello-world/"/>
      <url>/2022/03/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p> 欢迎访问我的博客！我将会在这里分享自己学习中遇到的问题和方法，希望我们可以一起进步！</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
